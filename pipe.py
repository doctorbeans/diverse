{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Pipeline\n",
    "from sklearn.base import BaseEstimator, TransformerMixin\n",
    "\n",
    "\n",
    "class clusterer(BaseEstimator, TransformerMixin):\n",
    "    \"\"\"Clusters gtfs positions with hdbscan algorithm. Calls approximate_predict from transform.\n",
    "       Copied from tidsmakin longterm pipeline \"\"\"\n",
    "    def __init__(self, min_cluster_size, columns, name):\n",
    "        self.min_cluster_size = min_cluster_size\n",
    "        self.columns= columns\n",
    "        self.cluster = hdbscan.HDBSCAN(self.min_cluster_size, prediction_data=True, core_dist_n_jobs=-1)\n",
    "        self.name = name\n",
    "        self.feature_names = None\n",
    "\n",
    "    def fit(self, X, y=None, **args):\n",
    "        \"\"\"Calls inner fit method. Requires X to have columns 'lon' and 'lat'.\"\"\"\n",
    "        self.cluster.fit(X[self.columns])\n",
    "        return self\n",
    "    \n",
    "    def transform(self, X, y=None, **args):\n",
    "        \"\"\"Calls approximate_predict method. Requires X to have columns 'lon' and 'lat'.\"\"\"\n",
    "        X = X.copy()\n",
    "        X[self.name] = hdbscan.approximate_predict(self.cluster, X[self.columns])[0]\n",
    "        return X\n",
    "    \n",
    "    def fit_transform(self, X, y=None, **args):\n",
    "        \"\"\"Calls inner fit_transform method. Requires X to have columns 'lon' and 'lat'.\"\"\"\n",
    "        X = X.copy()\n",
    "        X[self.name] = self.cluster.fit_predict(X[self.columns])\n",
    "        return X\n",
    "\n",
    "class averager(BaseEstimator, TransformerMixin):\n",
    "    \"\"\"takes a cluster and cerates averages\"\"\"\n",
    "    \n",
    "    def __init__(self, cluster_col, name, avg_col):\n",
    "        self.cluster_col=cluster_col\n",
    "        self.name = name\n",
    "        self.avg_col = avg_col\n",
    "        self.temp = None\n",
    "        self.feature_names = None\n",
    "        \n",
    "    def fit(self, X, y=None, **args):\n",
    "        X = X.copy()\n",
    "        self.temp = X.groupby(by=self.cluster_col)[self.avg_col].mean().rename(self.name)\n",
    "        return self\n",
    "    \n",
    "    def transform(self, X, y=None, **args):\n",
    "        X = X.copy()\n",
    "        X = pd.merge(X, self.temp, how='left', left_on=self.cluster_col, right_index=True)\n",
    "        return X\n",
    "\n",
    "class FeatureSelector(BaseEstimator, TransformerMixin):\n",
    "\n",
    "    def __init__(self, all_features=None, selected_features=None):\n",
    "        \"\"\"Constructor\"\"\"\n",
    "        self.all_features = all_features\n",
    "        self.selected_features = selected_features\n",
    "        self.mask = np.isin(all_features, selected_features)\n",
    "        \n",
    "    def fit(self, X, y=None):\n",
    "        \"\"\"Do nothing\"\"\"\n",
    "        return self\n",
    "    \n",
    "    def transform(self, X, y=None):\n",
    "        \"\"\"Filter columns based on selected_features\"\"\"\n",
    "        return X[self.selected_features]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
